// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    // Put your code here:
    And (a=true, b=instruction[15], out=i);

    Not (in=instruction[15], out=ni);
    And (a=ni, b=instruction[0], out=value[0]);
    And (a=ni, b=instruction[1], out=value[1]);
    And (a=ni, b=instruction[2], out=value[2]);
    And (a=ni, b=instruction[3], out=value[3]);
    And (a=ni, b=instruction[4], out=value[4]);
    And (a=ni, b=instruction[5], out=value[5]);
    And (a=ni, b=instruction[6], out=value[6]);
    And (a=ni, b=instruction[7], out=value[7]);
    And (a=ni, b=instruction[8], out=value[8]);
    And (a=ni, b=instruction[9], out=value[9]);
    And (a=ni, b=instruction[10], out=value[10]);
    And (a=ni, b=instruction[11], out=value[11]);
    And (a=ni, b=instruction[12], out=value[12]);
    And (a=ni, b=instruction[13], out=value[13]);
    And (a=ni, b=instruction[14], out=value[14]);

    // a
    And (a=instruction[15], b=instruction[12], out=a);

    // c
    And (a=instruction[15], b=instruction[11], out=zx); // c1
    And (a=instruction[15], b=instruction[10], out=nx); // c2
    And (a=instruction[15], b=instruction[9], out=zy);  // c3
    And (a=instruction[15], b=instruction[8], out=ny);  // c4
    And (a=instruction[15], b=instruction[7], out=f);   // c5
    And (a=instruction[15], b=instruction[6], out=no);  // c6

    // d
    And (a=instruction[15], b=instruction[5], out=da); // d1
    And (a=instruction[15], b=instruction[4], out=dd); // d2
    And (a=instruction[15], b=instruction[3], out=dm); // d3

    // j
    And (a=instruction[15], b=instruction[2], out=jl); // j1
    And (a=instruction[15], b=instruction[1], out=je); // j2
    And (a=instruction[15], b=instruction[0], out=jg); // j3
}